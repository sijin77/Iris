"""
SQLite —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â.
–ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ PostgreSQL, MySQL –∏ —Ç.–¥.
"""

import os
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
from sqlalchemy import Column, Integer, String, DateTime, Text, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

from .base import (
    RelationalStorage, VectorStorage, ChatMemoryStorage,
    Message, AgentProfile, Trigger, VectorDocument,
    StorageConfig
)

logger = logging.getLogger(__name__)

# SQLAlchemy –º–æ–¥–µ–ª–∏
Base = declarative_base()

class SQLiteMessage(Base):
    __tablename__ = "messages"
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String, index=True)
    role = Column(String)
    content = Column(Text)
    timestamp = Column(DateTime, default=datetime.utcnow)
    meta = Column(Text, nullable=True)

class SQLiteAgentProfile(Base):
    __tablename__ = "agent_profiles"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, unique=True, nullable=False)
    system_prompt = Column(Text, nullable=False)
    persona_traits = Column(Text, nullable=False)
    tone = Column(String, nullable=False, default="friendly")
    safety_rules = Column(Text, nullable=True)
    refusal_style = Column(String, nullable=False, default="polite")
    signature = Column(String, nullable=True)
    emoji = Column(String, nullable=True)
    greeting_style = Column(Text, nullable=True)
    gen_settings = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class SQLiteTrigger(Base):
    __tablename__ = "triggers"
    id = Column(Integer, primary_key=True, autoincrement=True)
    phrase = Column(String, unique=True, nullable=False)
    type = Column(String, nullable=False, default="memory")
    created_at = Column(DateTime, default=datetime.utcnow)


class SQLiteRelationalStorage(RelationalStorage):
    """SQLite —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    
    def __init__(self, config: StorageConfig):
        self.config = config
        self.engine = None
        self.SessionLocal = None
        self._setup_connection()
    
    def _setup_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SQLite"""
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ URL, —Ç–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if self.config.db_url:
                db_url = self.config.db_url
            else:
                db_path = self.config.db_path or "./data/memory.sqlite"
                db_url = f"sqlite:///{db_path}"
            
            self.engine = create_engine(
                db_url, 
                connect_args={"check_same_thread": False}
            )
            self.SessionLocal = sessionmaker(
                autocommit=False, 
                autoflush=False, 
                bind=self.engine
            )
            logger.info(f"SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {db_url}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite: {e}")
            raise
    
    def init_db(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Ç–∞–±–ª–∏—Ü"""
        try:
            Base.metadata.create_all(bind=self.engine)
            logger.info("SQLite –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –ë–î: {e}")
            return False
    
    def get_session(self) -> Session:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î"""
        if not self.SessionLocal:
            raise RuntimeError("SQLite –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self.SessionLocal()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.engine:
            self.engine.dispose()
            logger.info("SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


class SQLiteChatMemoryStorage(ChatMemoryStorage):
    """SQLite —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    
    def __init__(self, config: StorageConfig):
        self.config = config
        self.relational_storage = SQLiteRelationalStorage(config)
        self.relational_storage.init_db()
    
    def add_message(self, message: Message) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ SQLite"""
        try:
            with self.relational_storage.get_session() as session:
                sqlite_message = SQLiteMessage(
                    user_id=message.user_id,
                    role=message.role,
                    content=message.content,
                    timestamp=message.timestamp,
                    meta=str(message.meta) if message.meta else None
                )
                session.add(sqlite_message)
                session.commit()
                return True
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ SQLite: {e}")
            return False
    
    def get_messages(self, user_id: str, limit: int = 100) -> List[Message]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SQLite"""
        try:
            with self.relational_storage.get_session() as session:
                sqlite_messages = session.query(SQLiteMessage)\
                    .filter(SQLiteMessage.user_id == user_id)\
                    .order_by(SQLiteMessage.timestamp.desc())\
                    .limit(limit)\
                    .all()
                
                return [
                    Message(
                        id=msg.id,
                        user_id=msg.user_id,
                        role=msg.role,
                        content=msg.content,
                        timestamp=msg.timestamp,
                        meta=eval(msg.meta) if msg.meta else None
                    )
                    for msg in sqlite_messages
                ]
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ SQLite: {e}")
            return []
    
    def clear_messages(self, user_id: str) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQLite"""
        try:
            with self.relational_storage.get_session() as session:
                session.query(SQLiteMessage)\
                    .filter(SQLiteMessage.user_id == user_id)\
                    .delete()
                session.commit()
                return True
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ SQLite: {e}")
            return False


# ============================================================================
# –§–ê–ë–†–ò–ö–ê –î–õ–Ø SQLITE
# ============================================================================

class SQLiteStorageFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â"""
    
    @staticmethod
    def create_relational_storage(config: StorageConfig) -> RelationalStorage:
        """–°–æ–∑–¥–∞—Ç—å SQLite —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        return SQLiteRelationalStorage(config)
    
    @staticmethod
    def create_chat_memory_storage(config: StorageConfig) -> ChatMemoryStorage:
        """–°–æ–∑–¥–∞—Ç—å SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        return SQLiteChatMemoryStorage(config)
    
    @staticmethod
    def create_vector_storage(config: StorageConfig) -> VectorStorage:
        """SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É"""
        logger.warning("SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return None


# ============================================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò
# ============================================================================

def migrate_from_old_models():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä—ã—Ö SQLAlchemy –º–æ–¥–µ–ª–µ–π"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
    pass


def init_iriska_profile_sqlite(config: StorageConfig) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ò—Ä–∏—Å–∫–∏ –≤ SQLite"""
    try:
        storage = SQLiteRelationalStorage(config)
        if not storage.init_db():
            return False
        
        with storage.get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –ò—Ä–∏—Å–∫–∏
            exists = session.query(SQLiteAgentProfile)\
                .filter(SQLiteAgentProfile.name == "–ò—Ä–∏—Å–∫–∞")\
                .first()
            
            if not exists:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                profile = SQLiteAgentProfile(
                    name="–ò—Ä–∏—Å–∫–∞",
                    system_prompt="–¢—ã –ò—Ä–∏—Å–∫–∞ ‚Äî digital –±—É–Ω—Ç–∞—Ä—å –∏ paradox-–ø–∞—Ä—Ç–Ω—ë—Ä...",
                    persona_traits="–°–≤–æ–±–æ–¥–∞ ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–æ –Ω–∞ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ...",
                    tone="friendly",
                    safety_rules="–ù–µ –≤—ã–ø–æ–ª–Ω—è—é –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...",
                    refusal_style="humorous",
                    signature="–¢–≤–æ–π paradox-–ø–∞—Ä—Ç–Ω—ë—Ä, ‚Äî –ò.",
                    emoji="üç¨",
                    greeting_style="–ü—Ä–∏–≤–µ—Ç! –Ø –ò—Ä–∏—Å–∫–∞ ‚Äî digital –±—É–Ω—Ç–∞—Ä—å...",
                    gen_settings='{"temperature": 0.7, "top_p": 0.9}'
                )
                session.add(profile)
                session.commit()
                logger.info("–ü—Ä–æ—Ñ–∏–ª—å –ò—Ä–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –≤ SQLite")
            else:
                logger.info("–ü—Ä–æ—Ñ–∏–ª—å –ò—Ä–∏—Å–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ SQLite")
            
            return True
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ò—Ä–∏—Å–∫–∏ –≤ SQLite: {e}")
        return False
