"""
–†–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏.
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö.
"""

from fastapi import APIRouter, HTTPException
from datetime import datetime
import logging
from typing import Dict, Any

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
# from tools.agent_manager import CreateAgentRequest, create_agent_profile
# from agent.agent_switcher import (
#     agent_switcher, switch_to_agent_tool, 
#     return_to_iriska_tool, get_current_agent_tool
# )

logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/")
async def list_agents():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.
    """
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        available_agents = ["–ò—Ä–∏—Å–∫–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫", "–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫"]
        return {
            "status": "success",
            "agents": available_agents,
            "current_agent": "–ò—Ä–∏—Å–∫–∞",  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            "total_count": len(available_agents)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/current")
async def get_current_agent_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –∞–≥–µ–Ω—Ç–µ.
    """
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        current_agent = "–ò—Ä–∏—Å–∫–∞"
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ
        agent_info = f"–¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: {current_agent}"
        
        return {
            "status": "success",
            "current_agent": current_agent,
            "info": agent_info,
            "is_iriska": current_agent == "–ò—Ä–∏—Å–∫–∞"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞–≥–µ–Ω—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/switch")
async def switch_agent(agent_name: str, user_id: str = "default"):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
    """
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞
        result = f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        return {
            "status": "success" if "‚ùå" not in result else "error",
            "message": result,
            "new_agent": agent_name,
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/return")
async def return_to_iriska(user_id: str = "default"):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ò—Ä–∏—Å–∫–µ (–≥–ª–∞–≤–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É).
    """
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ –ò—Ä–∏—Å–∫–µ
        result = "–í–æ–∑–≤—Ä–∞—Ç –∫ –ò—Ä–∏—Å–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        
        return {
            "status": "success" if "‚ùå" not in result else "error",
            "message": result,
            "new_agent": "–ò—Ä–∏—Å–∫–∞",
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ò—Ä–∏—Å–∫–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/history")
async def get_switch_history(limit: int = 10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏.
    """
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
        # from agent.agent_switcher import get_switch_history_tool
        # history_text = get_switch_history_tool(limit)
        history_text = f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit}): –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫, –í–æ–∑–≤—Ä–∞—Ç –∫ –ò—Ä–∏—Å–∫–µ"
        
        return {
            "status": "success",
            "history": history_text,
            "limit": limit,
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/create")
async def create_new_agent(request: Dict[str, Any]):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
    """
    try:
        logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {request.get('name', 'Unknown')}")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ agent_manager
        # result = create_agent_profile(...)
        result = f"‚úÖ –ê–≥–µ–Ω—Ç {request.get('name', 'Unknown')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "‚úÖ" in result:
            return {
                "status": "success",
                "message": result,
                "agent_name": request.get('name', 'Unknown'),
                "timestamp": datetime.utcnow().isoformat()
            }
        else:
            return {
                "status": "error",
                "message": result,
                "agent_name": request.get('name', 'Unknown'),
                "timestamp": datetime.utcnow().isoformat()
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))
