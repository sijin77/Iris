"""
–†–æ—É—Ç—ã –¥–ª—è —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏.
–í–∫–ª—é—á–∞–µ—Ç OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API.
"""

from fastapi import APIRouter, HTTPException
from datetime import datetime
import logging
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
from schemas.openai import ChatRequest, ChatResponse, Message

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
# from agent.agent_switcher import (
#     agent_switcher, switch_to_agent_tool, 
#     return_to_iriska_tool, get_current_agent_tool
# )
# from agent.memory import add_message
# from agent.retriever import get_relevant_documents

logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —á–∞—Ç–∞
router = APIRouter()

# OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–æ—É—Ç–µ—Ä
openai_router = APIRouter()

@openai_router.post("/chat/completions")
async def chat_completions(request: ChatRequest):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏ (OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π).
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ß–∞—Ç —Å –ò—Ä–∏—Å–∫–æ–π (–≥–ª–∞–≤–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º)
    - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        logger.info(f"üí¨ –ß–∞—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: model={request.model}, messages_count={len(request.messages)}")
        logger.info(f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {request.messages[-1].content[:100]}...")
        logger.info(f"üí¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞: {request.dict()}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if not request.messages:
            logger.error("‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
            raise HTTPException(status_code=400, detail="Messages cannot be empty")
        
        if not request.model:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å")
            raise HTTPException(status_code=400, detail="Model is required")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        current_agent = "–ò—Ä–∏—Å–∫–∞"
        logger.info(f"ü§ñ –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: {current_agent}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        user_message = request.messages[-1].content.lower()
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if any(phrase in user_message for phrase in [
            "–ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞", "–∞–∫—Ç–∏–≤–∏—Ä—É–π", "–∑–∞–ø—É—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞", "–≤–∫–ª—é—á–∏"
        ]):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            agent_name = None
            for phrase in ["–ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞", "–∞–∫—Ç–∏–≤–∏—Ä—É–π", "–∑–∞–ø—É—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞", "–≤–∫–ª—é—á–∏"]:
                if phrase in user_message:
                    parts = user_message.split(phrase)
                    if len(parts) > 1:
                        agent_name = parts[1].strip().split()[0]
                        break
            
            if agent_name:
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞
                switch_result = f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                return ChatResponse(
                    id=f"chatcmpl-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}",
                    object="chat.completion",
                    choices=[{
                        "message": Message(
                            role="assistant",
                            content=switch_result
                        ),
                        "finish_reason": "stop"
                    }],
                    usage={"total_tokens": 0, "prompt_tokens": 0, "completion_tokens": 0}
                )
        
        # –ö–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ò—Ä–∏—Å–∫–µ
        elif any(phrase in user_message for phrase in [
            "–≤–µ—Ä–Ω–∏—Å—å –∫ —Å–µ–±–µ", "–≤–µ—Ä–Ω–∏—Å—å –∫ –∏—Ä–∏—Å–∫–µ", "–≤–µ—Ä–Ω–∏—Å—å", "–∏—Ä–∏—Å–∫–∞"
        ]):
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ –ò—Ä–∏—Å–∫–µ
            return_result = "‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ –ò—Ä–∏—Å–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
            return ChatResponse(
                id=f"chatcmpl-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}",
                object="chat.completion",
                choices=[{
                    "message": Message(
                        role="assistant",
                        content=return_result
                    ),
                    "finish_reason": "stop"
                }],
                usage={"total_tokens": 0, "prompt_tokens": 0, "completion_tokens": 0}
            )
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞–≥–µ–Ω—Ç–µ
        elif any(phrase in user_message for phrase in [
            "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π", "–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è", "—Å—Ç–∞—Ç—É—Å"
        ]):
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = f"–Ø {current_agent} - —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫!"
            return ChatResponse(
                id=f"chatcmpl-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}",
                object="chat.completion",
                choices=[{
                    "message": Message(
                        role="assistant",
                        content=agent_info
                    ),
                    "finish_reason": "stop"
                }],
                usage={"total_tokens": 0, "prompt_tokens": 0, "completion_tokens": 0}
            )
        
        # –û–±—ã—á–Ω—ã–π —á–∞—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ LLM
        else:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏
            context = None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            if current_agent == "–ò—Ä–∏—Å–∫–∞":
                response_content = f"–ü—Ä–∏–≤–µ—Ç, –ú–∞—Ä–∞—Ç! –Ø –ò—Ä–∏—Å–∫–∞ - —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π AI-–º–µ–Ω–µ–¥–∂–µ—Ä! üöÄ\n\n–¢—ã —Å–ø—Ä–æ—Å–∏–ª: '{request.messages[-1].content}'\n\n–Ø –º–æ–≥—É:\n‚Ä¢ –ü–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–±—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
            else:
                response_content = f"–ü—Ä–∏–≤–µ—Ç! –Ø {current_agent} - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç.\n\n–¢—ã —Å–ø—Ä–æ—Å–∏–ª: '{request.messages[-1].content}'\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤ —Ä–∞–º–∫–∞—Ö —Å–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º, —Å–∫–∞–∂–∏ '–í–µ—Ä–Ω–∏—Å—å –∫ –ò—Ä–∏—Å–∫–µ'."
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç—å
            # add_message(
            #     message=request.messages[-1].content,
            #     role="user",
            #     emotion="neutral"
            # )
            # add_message(
            #     message=response_content,
            #     role="assistant",
            #     emotion="friendly"
            # )
            
            return ChatResponse(
                id=f"chatcmpl-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}",
                object="chat.completion",
                choices=[{
                    "message": Message(
                        role="assistant",
                        content=response_content
                    ),
                    "finish_reason": "stop"
                }],
                usage={"total_tokens": 0, "prompt_tokens": 0, "completion_tokens": 0}
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        error_response = f"–ò–∑–≤–∏–Ω–∏, –ú–∞—Ä–∞—Ç! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–∫–∞–∂–∏ '–í–µ—Ä–Ω–∏—Å—å –∫ –ò—Ä–∏—Å–∫–µ' –¥–ª—è —Å–±—Ä–æ—Å–∞."
        
        return ChatResponse(
            id=f"chatcmpl-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}",
            object="chat.completion",
            choices=[{
                "message": Message(
                    role="assistant",
                    content=error_response
                ),
                "finish_reason": "stop"
            }],
            usage={"total_tokens": 0, "prompt_tokens": 0, "completion_tokens": 0}
        )

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API —Ä–æ—É—Ç—ã –¥–ª—è —á–∞—Ç–∞
@router.get("/status")
async def get_chat_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞"""
    return {
        "status": "active",
        "current_agent": "–ò—Ä–∏—Å–∫–∞",  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        "timestamp": datetime.utcnow().isoformat()
    }
