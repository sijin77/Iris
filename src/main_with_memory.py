#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Iriska —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç—å—é.
"""

import asyncio
import logging
import os
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
from agent.memory import EnhancedMemoryController, MemoryConfig
from agent.emotional_memory import (
    initialize_emotional_memory, 
    shutdown_emotional_memory,
    EmotionalMemoryConfig
)

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from routes.chat import router as chat_router, openai_router
from routes.agents import router as agents_router
from routes.config import router as config_router
from routes.system import router as system_router
from routes.tools import router as tools_router
from routes.profile_management import router as profile_router


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
enhanced_memory_controller = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global enhanced_memory_controller
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Iriska —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏...")
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–º—è—Ç–∏
        memory_config = MemoryConfig(
            optimization_interval_minutes=30,
            cleanup_interval_minutes=60,
            max_fragments_per_level=10000,
            promotion_threshold=0.7,
            demotion_threshold=0.3,
            eviction_threshold=0.1
        )
        
        enhanced_memory_controller = EnhancedMemoryController(memory_config)
        
        if await enhanced_memory_controller.initialize():
            logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–º—è—Ç–∏")
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        emotional_config = EmotionalMemoryConfig(
            emotion_detection_threshold=0.3,
            emotional_weight_multiplier=1.5,
            profile_adjustment_threshold=0.7,
            max_adjustments_per_day=3
        )
        
        if await initialize_emotional_memory(enhanced_memory_controller, emotional_config):
            logger.info("‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if enhanced_memory_controller:
            await enhanced_memory_controller.start()
            logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        
        logger.info("üéâ Iriska –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        
        yield
        
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Iriska...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        await shutdown_emotional_memory()
        logger.info("‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–º—è—Ç–∏
        if enhanced_memory_controller:
            await enhanced_memory_controller.stop()
            logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–º—è—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("üëã Iriska –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É")


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Iriska AI Agent",
    description="AI Agent —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π",
    version="2.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(openai_router, prefix="/v1", tags=["OpenAI Compatible"])
app.include_router(chat_router, prefix="/api/v1/chat", tags=["Chat"])
app.include_router(agents_router, prefix="/api/v1/agents", tags=["Agents"])
app.include_router(config_router, prefix="/api/v1/config", tags=["Configuration"])
app.include_router(system_router, prefix="/api/v1/system", tags=["System"])
app.include_router(tools_router, prefix="/api/v1/tools", tags=["Tools"])
app.include_router(profile_router, prefix="/api/v1/profiles", tags=["Profile Management"])


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Iriska AI Agent v2.0 - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏",
        "status": "running",
        "features": [
            "–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø–∞–º—è—Ç—å L1-L4",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è",
            "–ù–µ–π—Ä–æ–º–æ–¥—É–ª—è—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangChain",
            "OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API"
        ]
    }


@app.get("/api/v1/memory/status")
async def memory_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    if not enhanced_memory_controller:
        return {"status": "not_initialized"}
    
    try:
        stats = await enhanced_memory_controller.get_comprehensive_stats()
        return {
            "status": "active",
            "controller_type": "EnhancedMemoryController",
            "is_running": enhanced_memory_controller.is_running,
            "stats": stats
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}


@app.post("/api/v1/memory/optimize")
async def trigger_optimization():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    if not enhanced_memory_controller:
        return {"status": "not_initialized"}
    
    try:
        results = await enhanced_memory_controller.run_full_optimization_cycle()
        return {
            "status": "completed",
            "results": results
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}


@app.post("/api/v1/memory/emergency")
async def emergency_optimization(target_utilization: float = 0.7):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
    if not enhanced_memory_controller:
        return {"status": "not_initialized"}
    
    try:
        results = await enhanced_memory_controller.emergency_optimization(target_utilization)
        return {
            "status": "completed", 
            "results": results
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}


@app.post("/api/v1/memory/rebalance")
async def rebalance_storage():
    """–ü–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"""
    if not enhanced_memory_controller:
        return {"status": "not_initialized"}
    
    try:
        results = await enhanced_memory_controller.rebalance_storage_levels()
        return {
            "status": "completed",
            "results": results
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}


@app.get("/api/v1/emotional/status")
async def emotional_memory_status():
    """–°—Ç–∞—Ç—É—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    from agent.emotional_memory import get_emotional_integration
    
    integration = get_emotional_integration()
    if not integration:
        return {"status": "not_initialized"}
    
    try:
        stats = integration.get_integration_stats()
        return {
            "status": "active",
            "stats": stats
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}


@app.get("/api/v1/emotional/summary/{user_id}")
async def get_emotional_summary(user_id: str, hours: int = 24):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from agent.emotional_memory import get_emotional_integration
    
    integration = get_emotional_integration()
    if not integration:
        return {"status": "not_initialized"}
    
    try:
        summary = await integration.get_emotional_summary_for_user(user_id, hours)
        return {
            "status": "success",
            "user_id": user_id,
            "period_hours": hours,
            "summary": summary
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}


if __name__ == "__main__":
    import uvicorn
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    reload = os.getenv("RELOAD", "false").lower() == "true"
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Iriska –Ω–∞ {host}:{port}")
    
    uvicorn.run(
        "main_with_memory:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )
